{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","normalWeeklyWorkhours","updateNormalWeeklyWorkHours","normalDaysAWeek","updateNormalDaysAWeek","percentFurloughed","updatePercentFurloughed","averageDayHours","updateAverageDayHours","percentWorking","updatePercentWorking","days","hours","exceptionalWeeklength","updateExceptionWeeklength","exceptionalHours","updateExceptionalHours","furloughedWeeklyWorkhours","furloughedExceptionalHours","easilyReadable","floatHours","Math","floor","absoluteHours","abs","minutesDecimal","minutes","ceil","className","htmlFor","type","name","value","min","max","id","onChange","e","target","step","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA6KeA,MA1Kf,WAAgB,IAAD,EACgDC,mBAAS,IADzD,mBACNC,EADM,KACiBC,EADjB,OAEoCF,mBAAS,GAF7C,mBAENG,EAFM,KAEWC,EAFX,OAGwCJ,mBAAS,IAHjD,mBAGNK,EAHM,KAGaC,EAHb,OAIoCN,mBAC/CC,EAAwBE,GALb,mBAINI,EAJM,KAIWC,EAJX,OAOkCR,mBAC7C,EAAIK,EAAoB,KARb,mBAONI,EAPM,KAOUC,EAPV,OAU8CV,mBAAS,CAClEW,KAAMR,EACNS,MAAOX,IAZI,mBAUNY,EAVM,KAUiBC,EAVjB,OAcsCd,mBACjDa,EAAsBD,OAfX,mBAcNG,EAdM,KAcYC,EAdZ,KAkBPC,EAA4BhB,EAAwBQ,EACpDS,EAA6BH,EAAmBN,EAEtD,SAASU,EAAeC,GACtB,IAAMR,EAAQS,KAAKC,MAAMF,GACnBG,EAAgBF,KAAKG,IAAIJ,GACzBK,EAAiBL,EAAaC,KAAKC,MAAMC,GACzCG,EAAUL,KAAKM,KAAsB,GAAjBF,GAG1B,MADE,UAAGb,EAAH,WAAgC,IAAZc,EAAA,eAAwBA,EAAxB,gBAIxB,OACE,sBAAKE,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,6CACA,qBAAKA,UAAU,UAAf,SACE,uIAKF,sBAAKA,UAAU,aAAf,UACE,2DACA,sBAAKA,UAAU,0BAAf,UACE,wBAAOC,QAAQ,gCAAf,qCAC2B,OAE3B,uBACEC,KAAK,SACLC,KAAK,gCACLC,MAAO/B,EACPgC,IAAI,IACJC,IAAI,KACJC,GAAG,wBACHC,SAAU,SAACC,GACTnC,EAA4BmC,EAAEC,OAAON,OACrClB,EAA0B,CACxBH,KAAMR,EACNS,MAAOyB,EAAEC,OAAON,QAElBhB,EAAuBqB,EAAEC,OAAON,OAChCxB,EAAsB6B,EAAEC,OAAON,MAAQ7B,MAEjC,IApBZ,WAuBA,sBAAKyB,UAAU,qBAAf,UACE,wBAAOC,QAAQ,2BAAf,8CACoC,OAEpC,uBACEC,KAAK,SACLC,KAAK,2BACLC,MAAO7B,EACP8B,IAAI,IACJC,IAAI,IACJC,GAAG,kBACHC,SAAU,SAACC,GACTjC,EAAsBiC,EAAEC,OAAON,OAC/BlB,EAA0B,CACxBH,KAAM0B,EAAEC,OAAON,MACfpB,MAAOX,IAETO,EAAsBP,EAAwBoC,EAAEC,OAAON,UAEjD,IAnBZ,UAsBA,sBAAKJ,UAAU,qBAAf,UACE,wBAAOC,QAAQ,2BAAf,gCACsB,OAEtB,uBACEC,KAAK,SACLC,KAAK,2BACLC,MAAO3B,EACP4B,IAAI,IACJC,IAAI,MACJC,GAAG,oBACHC,SAAU,SAACC,GACT/B,EAAwB+B,EAAEC,OAAON,OACjCtB,EAAqB,EAAI2B,EAAEC,OAAON,MAAQ,QAEpC,IAfZ,UAmBF,qBAAKJ,UAAU,gBAAf,SACE,qDACuBT,EAAeZ,GADtC,oBAGE,uBAHF,MAIMF,EAJN,gDAIsE,IACnEc,EAAeF,GALlB,KAK+C,+BAInD,uBAAMW,UAAU,WAAhB,UACE,kDACA,wBAAOC,QAAQ,8BAAf,0CACgC,OAEhC,uBACEC,KAAK,QACLC,KAAK,8BACLC,MAAOnB,EAAsBF,KAC7BsB,IAAI,IACJC,IAAK/B,EACLgC,GAAG,4BACHC,SAAU,SAACC,GACTvB,EAA0B,CACxBH,KAAM0B,EAAEC,OAAON,MACfpB,MAAOyB,EAAEC,OAAON,OAAS/B,EAAwBE,KAEnDa,EACEqB,EAAEC,OAAON,OAAS/B,EAAwBE,OAGtC,IACTkB,KAAKM,KAAKd,EAAsBF,MAtBnC,QAuBE,wBAAOkB,QAAQ,+BAAf,uCAC6B,OAE7B,uBACEC,KAAK,QACLC,KAAK,+BACLC,MAAOjB,EACPkB,IACEpB,EAAsBD,MACtBS,KAAKC,MAAMD,KAAKG,IAAIX,EAAsBD,QAE5CsB,IAAKrB,EAAsBD,MAC3B2B,KAAK,IACLJ,GAAG,6BACHC,SAAU,SAACC,GACTrB,EAAuBqB,EAAEC,OAAON,UAE1B,IACTb,EAAeJ,GAChB,qBAAKa,UAAU,qBAAf,SACE,mEACqC,IACnC,iCAAST,EAAeD,KAF1B,gBCvJKsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.07278d5f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [normalWeeklyWorkhours, updateNormalWeeklyWorkHours] = useState(38);\n  const [normalDaysAWeek, updateNormalDaysAWeek] = useState(5);\n  const [percentFurloughed, updatePercentFurloughed] = useState(50);\n  const [averageDayHours, updateAverageDayHours] = useState(\n    normalWeeklyWorkhours / normalDaysAWeek\n  );\n  const [percentWorking, updatePercentWorking] = useState(\n    1 - percentFurloughed / 100\n  );\n  const [exceptionalWeeklength, updateExceptionWeeklength] = useState({\n    days: normalDaysAWeek,\n    hours: normalWeeklyWorkhours,\n  });\n  const [exceptionalHours, updateExceptionalHours] = useState(\n    exceptionalWeeklength.hours\n  );\n\n  const furloughedWeeklyWorkhours = normalWeeklyWorkhours * percentWorking;\n  const furloughedExceptionalHours = exceptionalHours * percentWorking;\n\n  function easilyReadable(floatHours) {\n    const hours = Math.floor(floatHours);\n    const absoluteHours = Math.abs(floatHours);\n    const minutesDecimal = floatHours - Math.floor(absoluteHours);\n    const minutes = Math.ceil(minutesDecimal * 60);\n    const output =\n      `${hours} hours` + (minutes !== 0 ? ` and ${minutes} minutes` : ``);\n    return output;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Furloughify</h1>\n        <div className=\"ingress\">\n          <p>\n            The easy-made-app to calculate exceptional working hours when being\n            furloughed at a certain percent.\n          </p>\n        </div>\n        <div className=\"basic-info\">\n          <p>Please fill in basic info.</p>\n          <div className=\"normal-weekly-workhours\">\n            <label htmlFor=\"normal-weekly-workhours-input\">\n              Normal weekly workhours:{\" \"}\n            </label>\n            <input\n              type=\"number\"\n              name=\"normal-weekly-workhours-input\"\n              value={normalWeeklyWorkhours}\n              min=\"0\"\n              max=\"40\"\n              id=\"normalWeeklyWorkhours\"\n              onChange={(e) => {\n                updateNormalWeeklyWorkHours(e.target.value);\n                updateExceptionWeeklength({\n                  days: normalDaysAWeek,\n                  hours: e.target.value,\n                });\n                updateExceptionalHours(e.target.value);\n                updateAverageDayHours(e.target.value / normalDaysAWeek);\n              }}\n            ></input>{\" \"}\n            hours\n          </div>\n          <div className=\"normal-days-a-week\">\n            <label htmlFor=\"normal-days-a-week-input\">\n              Normal amount of workdays a week:{\" \"}\n            </label>\n            <input\n              type=\"number\"\n              name=\"normal-days-a-week-input\"\n              value={normalDaysAWeek}\n              min=\"1\"\n              max=\"5\"\n              id=\"normalDaysAWeek\"\n              onChange={(e) => {\n                updateNormalDaysAWeek(e.target.value);\n                updateExceptionWeeklength({\n                  days: e.target.value,\n                  hours: normalWeeklyWorkhours,\n                });\n                updateAverageDayHours(normalWeeklyWorkhours / e.target.value);\n              }}\n            ></input>{\" \"}\n            days\n          </div>\n          <div className=\"percent-furloughed\">\n            <label htmlFor=\"percent-furloughed-input\">\n              Percent furloughed:{\" \"}\n            </label>\n            <input\n              type=\"number\"\n              name=\"percent-furloughed-input\"\n              value={percentFurloughed}\n              min=\"0\"\n              max=\"100\"\n              id=\"percentFurloughed\"\n              onChange={(e) => {\n                updatePercentFurloughed(e.target.value);\n                updatePercentWorking(1 - e.target.value / 100);\n              }}\n            ></input>{\" \"}\n            %\n          </div>\n        </div>\n        <div className=\"normal-output\">\n          <p>\n            A normal workday is {easilyReadable(averageDayHours)} long on\n            average.\n            <br />\n            As {percentFurloughed}% furloughed the normal work time per week is{\" \"}\n            {easilyReadable(furloughedWeeklyWorkhours)}. <br />\n          </p>\n        </div>\n      </header>\n      <main className=\"App-main\">\n        <h2>Exceptional week</h2>\n        <label htmlFor=\"exceptional-weeklength-days\">\n          Workdays in exceptional week:{\" \"}\n        </label>\n        <input\n          type=\"range\"\n          name=\"exceptional-weeklength-days\"\n          value={exceptionalWeeklength.days}\n          min=\"1\"\n          max={normalDaysAWeek}\n          id=\"exceptionalWeeklengthDays\"\n          onChange={(e) => {\n            updateExceptionWeeklength({\n              days: e.target.value,\n              hours: e.target.value * (normalWeeklyWorkhours / normalDaysAWeek),\n            });\n            updateExceptionalHours(\n              e.target.value * (normalWeeklyWorkhours / normalDaysAWeek)\n            );\n          }}\n        ></input>{\" \"}\n        {Math.ceil(exceptionalWeeklength.days)} days\n        <label htmlFor=\"exceptional-weeklength-hours\">\n          Hours in exceptional week:{\" \"}\n        </label>\n        <input\n          type=\"range\"\n          name=\"exceptional-weeklength-hours\"\n          value={exceptionalHours}\n          min={\n            exceptionalWeeklength.hours -\n            Math.floor(Math.abs(exceptionalWeeklength.hours))\n          }\n          max={exceptionalWeeklength.hours}\n          step=\"1\"\n          id=\"exceptionalWeeklengthHours\"\n          onChange={(e) => {\n            updateExceptionalHours(e.target.value);\n          }}\n        ></input>{\" \"}\n        {easilyReadable(exceptionalHours)}\n        <div className=\"exceptional-output\">\n          <p>\n            The exceptional week, work time is{\" \"}\n            <strong>{easilyReadable(furloughedExceptionalHours)}</strong>.\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}